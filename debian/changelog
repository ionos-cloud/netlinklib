netlinklib (2.0.1) stable; urgency=medium

  [ Eugene Crosser ]
  * mknetlinkdefs.py: use ULL for values in `deps`
  * Use NLL_EXTRA_HEADERS env for more netlink headers
  * mknetlinkdefs: include veth.h for VETH_INFO_PEER

  [ Michael Dickensheets ]
  * core: better NlaList and event handling

  [ Eugene Crosser ]
  * Add `__repr__()` to NlaStruct

  [ Michael Dickensheets ]
  * core: fix NlaIp parsing
  * core: split NlaIp into separate IP4 and IP6 types
  * examples: update link example
  * core: add NlaMac type

  [ Eugene Crosser ]
  * sed -i -e s/NlaInt/NlaInt32/g
  * Introduce NlaUInt[8,16,64]

  [ Michael Dickensheets ]
  * core: add more generic parser filtering mechanism
  * core: add remaining Nla(U)Int* classes

  [ Eugene Crosser ]
  * inlcude all Nla*Int* in __all__ for proper export

  [ Michael Dickensheets ]
  * Subsume filter mechanism into generalized callback.

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Tue, 07 Jan 2025 12:26:09 +0100

netlinklib (2.0.0) stable; urgency=medium

  * core: introduce NlaType

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Fri, 13 Dec 2024 13:16:42 +0100

netlinklib (1.1.0) stable; urgency=medium

  [ Eugene Crosser ]
  * README: fix typos
  * mknetlinkdefs: include traffic control definitions
  * Restructure frontend into multiple files
  * test: switch to black >= 24
  * qdisc query, initial implementation
  * mknetlinkdefs: Handle nested structs
  * Support "signed" in struct fields
  * WIP implement some TC operations
  * WIP on TC parser
  * WIP: all TC dumps supported
  * Complete TC GET and DUMP operations
  * TC: support tc_prio_qopt sctructure that has array
  * TC: support all(?) qdisc operations
  * TC: implement new_class for htb
  * mknetlinkdefs: run structs through cpp
  * Do not parse vararray at the end of structs
  * Introduce `dict` property to NllMsg
  * Implement tc filter dump
  * mknetlinkdefs: use encoding="utf-8" because.
  * TC: separate tcm_info into protocol and priority
  * TC: construct attrs for flow filter
  * Use FLOW_MODE (for some reason)
  * Adjust type annotations for mypy 1.11.1

  [ Michael Dickensheets ]
  * link: support creation/deletion of type erspan links

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Thu, 21 Nov 2024 14:27:27 +0100

netlinklib (1.0.3) stable; urgency=medium

  * UNRELEASED

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Mon, 04 Nov 2024 18:25:40 +0100

netlinklib (1.0.2) stable; urgency=medium

  [ Eugene Crosser ]
  * Expand README for external use

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Mon, 15 Jul 2024 16:27:06 +0200

netlinklib (1.0.1) stable; urgency=medium

  * tests: disable black v24 for now

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Mon, 27 May 2024 13:23:02 +0200

netlinklib (1.0) stable; urgency=medium

  [ Eugene Crosser ]
  * Add tests
  * add tests, do not use Suppress.using_each()
  * mknetlinkdefs: do not use pyparsing.common
  * pyparsing compatibility tweaks
  * mknetlinkdefs: more compatibility with pyparsing
  * styling cleanups
  * Build netlinklib.classes python definitions
  * Make a base class with useful methods
  * convert to using new classes from raw pack/unpack
  * make mypy happy with complex dict
  * Take common parts away from __init__.py
  * Some pylinting
  * Implement `nll_get_neigh()`
  * add py.typed
  * NllDumpInterrupted needed for reexport from top
  * include py.typed in setup.py
  * nll_get_links(nameonly=True) is a bit faster
  * optimise class constructor for speed
  * test script __main__ use better profiling
  * Use memoryview; remove some checks for speed
  * mkdefs: allow enum value to be anything
  * allow all_routes be cut down by table_set
  * support default 0 for integer class kwargs
  * Implemented nll_link_lookup
  * Fix missing class, use proper class for link dump
  * Include binary size of each message class
  * make message parser use SIZE and leave remainder
  * Get rid of manual slicing of the data
  * For neigh lookup use AF_BRIDGE by default (fdb)

  [ Michael Dickensheets ]
  * support add/del_route txns
  * core: use 'yield from' in nll_get_dump

  [ Eugene Crosser ]
  * raise an instance NllDumpInterrupted() as we must

  [ Michael Dickensheets ]
  * nll_get_event: listen on socket and parse netlink events
  * newroute_parser: include 'protocol' in output dict
  * newroute_parser: include scope in response dict
  * _nll_route: use 'standard' integer format when build packet instead of 'native'

  [ Eugene Crosser ]
  * Allow attrs for nll_get_dump() too
  * support kernel side filtering for dump_routes

  [ Michael Dickensheets ]
  * nll_route: support multipath routes
  * route: use attr for selecting krt

 -- Michael Dickensheets <michael.dickensheets@ionos.com>  Fri, 10 May 2024 15:50:46 +0200

netlinklib (0.01) stable; urgency=medium

  * Initial version

 -- Eugene Crosser <evgenii.cherkashin@ionos.com>  Fri, 26 Jan 2024 14:42:38 +0100
