"""
UNFINISHED PROTOTYPE, NOT USED YET

Build python definitions from netlink header definitions

Include build dependency on `linux-libc-dev` package

Example from https://stackoverflow.com/questions/58732872/can-python-load-definitions-from-a-c-header-file


To verify result against manually assembled defs file:
    for k, v in vars(odefs).items():
        if vars(defs).get(k) != v:
            print(k, v, vars(defs).get(k))

"""

from pyparsing import *
from pyparsing import common

SRC = [
    "/usr/include/linux/if_link.h",
    "/usr/include/linux/netlink.h",
    "/usr/include/linux/genetlink.h",
    "/usr/include/linux/rtnetlink.h",
]

# syntax we don't want to see in the final parse tree
LPAREN, RPAREN, LBRACE, RBRACE, EQ, COMMA = Suppress.using_each("(){}=,")
_enum = Suppress("enum")
arith_op = one_of("+ - * /")
arith_elem = common.identifier ^ common.integer
arith_expr = Group(arith_elem + (arith_op + arith_elem)[...])
paren_expr = arith_expr ^ (LPAREN + arith_expr + RPAREN)
enumValue = Group(
    common.identifier("name") + Optional(EQ + paren_expr("value"))
)
enumList = Group(enumValue + (COMMA + enumValue)[...] + Optional(COMMA))
enum = (
    _enum
    + Optional(common.identifier("ename"))
    + LBRACE
    + enumList("names")
    + RBRACE
)
enum.ignore(c_style_comment)

define = LineStart() + Suppress("#define") + common.identifier("name")
define.ignore(c_style_comment)

enum_or_define = enum("enum") ^ define("define")
# enum_or_define = enum("enum")


def make_defs_file(out):
    print("/* Autogenerated netlink definitions */", file=out)
    print("/* DO NOT EDIT! */", file=out)
    for fl in SRC:
        with open(fl, encoding="utf-8") as src:
            # find instances of enums and defines ignoring other syntax
            for item, start, stop in enum_or_define.scan_string(src.read()):
                if hasattr(item, "define"):
                    if item.name:
                        print(
                            f'\t{{ "{item.name}", {item.name} }},'
                            f" /* define */",
                            file=out,
                        )
                    else:
                        print("****************\n", item.dump())
                if hasattr(item, "names"):
                    idx = 0
                    for entry in item.names:
                        do_print = True
                        if entry.value != "":
                            try:
                                idx = int(entry.value)
                            except TypeError:
                                do_print = False
                        if do_print and not entry.name.startswith("__"):
                            print(
                                f'\t{{ "{entry.name}", {entry.name} }},'
                                f" /* enum {item.ename} */",
                                file=out,
                            )
                        idx += 1


if __name__ == "__main__":
    from sys import stdout

    make_defs_file(stdout)
